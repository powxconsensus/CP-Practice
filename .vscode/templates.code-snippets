{
	// Place your CP workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"start": {
		"prefix": "start",
		"body": [
		  "#include <iostream>",
		  "#include <algorithm>",
		  "#include <vector>",
		  "#include <cmath>",
		  "#include <map>",
		  "#include <set>",
		  "#include <climits>",
		  "",
		  "using namespace std;",
		  "",
		  "#define mod 998244353",
		  "#define lli long long int",
		  "#define ll long long",
		  "#define li long int",
		  "#define FastIO               \\",
		  "    ios::sync_with_stdio(0); \\",
		  "    cin.tie(0)",
		  "",
		  "class PNC",
		  "{",
		  "public:",
		  "    vector<unsigned lli> f;",
		  "    lli m;",
		  "    PNC(lli n, lli m = mod)",
		  "    {",
		  "        f.resize(n + 1);",
		  "        this->m = m;",
		  "        f[0] = 1;",
		  "        for (int i = 1; i <= n; i++)",
		  "        {",
		  "            f[i] = (i * f[i - 1]) % m;",
		  "        }",
		  "    }",
		  "    lli power(lli b, lli p, lli m = mod)",
		  "    {",
		  "        lli res = 1;",
		  "        while (p > 0)",
		  "        {",
		  "            if (p & 1)",
		  "                res = ((res % m) * (b % m)) % m;",
		  "            b = ((b % m) * (b % m)) % m;",
		  "            p = p >> 1;",
		  "        }",
		  "        return res;",
		  "    }",
		  "    lli modInverse(lli n, lli m = mod) { return power(n, m - 2, m); }",
		  "    lli factorial(lli n) { return f[n]; }",
		  "    lli nCr(lli n, lli r)",
		  "    {",
		  "        if (r == 0)",
		  "            return 1;",
		  "        return (f[n] * modInverse(f[r], m) % m * modInverse(f[n - r], m) % m) % m;",
		  "    }",
		  "    lli nPr(lli n, lli r)",
		  "    {",
		  "        if (r == 0)",
		  "            return 1;",
		  "        return (f[n] * modInverse(f[n - r], m) % m) % m;",
		  "    }",
		  "};",
		  "",
		  "int main()",
		  "{",
		  "    FastIO;",
		  "    return 0;",
		  "}"
		],
		"description": ""
	  }
}